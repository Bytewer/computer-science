export const data = JSON.parse("{\"key\":\"v-9654b798\",\"path\":\"/Java/jvm/part1/16.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.html\",\"title\":\"垃圾回收相关概念\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":16,\"title\":\"垃圾回收相关概念\",\"category\":[\"JVM\"],\"tag\":[\"JVM上篇\"],\"description\":\"[TOC]\\r在默认情况下，通过 System.gc() 者 Runtime.getRuntime().gc() 的调用，会显式触发 Full GC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。; \\r然而 System.gc() 调用附带一个免责声明，无法保证对垃圾收集器的调用。（不能确保立即生效）; \\rJVM 实现者可以通过 Syste...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://zhiyu1998.github.io/Java/jvm/part1/16.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.html\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"垃圾回收相关概念\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"[TOC]\\r在默认情况下，通过 System.gc() 者 Runtime.getRuntime().gc() 的调用，会显式触发 Full GC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。; \\r然而 System.gc() 调用附带一个免责声明，无法保证对垃圾收集器的调用。（不能确保立即生效）; \\rJVM 实现者可以通过 Syste...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://zhiyu1998.github.io/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"垃圾回收相关概念\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"zhiyu1998\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JVM上篇\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"垃圾回收相关概念\\\",\\\"image\\\":[\\\"https://zhiyu1998.github.io/\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"zhiyu1998\\\",\\\"url\\\":\\\"https://github.com/zhiyu1998\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"手动 GC 来理解不可达对象的回收\",\"slug\":\"手动-gc-来理解不可达对象的回收\",\"link\":\"#手动-gc-来理解不可达对象的回收\",\"children\":[]},{\"level\":2,\"title\":\"内存溢出（OOM）\",\"slug\":\"内存溢出-oom\",\"link\":\"#内存溢出-oom\",\"children\":[]},{\"level\":2,\"title\":\"内存泄露（Memory Leak）\",\"slug\":\"内存泄露-memory-leak\",\"link\":\"#内存泄露-memory-leak\",\"children\":[{\"level\":3,\"title\":\"Java 中出现内存泄露的例子\",\"slug\":\"java-中出现内存泄露的例子\",\"link\":\"#java-中出现内存泄露的例子\",\"children\":[]}]},{\"level\":2,\"title\":\"程序中的并行与并发\",\"slug\":\"程序中的并行与并发\",\"link\":\"#程序中的并行与并发\",\"children\":[]},{\"level\":2,\"title\":\"垃圾回收中的并行与并发\",\"slug\":\"垃圾回收中的并行与并发\",\"link\":\"#垃圾回收中的并行与并发\",\"children\":[]},{\"level\":2,\"title\":\"安全点\",\"slug\":\"安全点\",\"link\":\"#安全点\",\"children\":[]},{\"level\":2,\"title\":\"安全区域\",\"slug\":\"安全区域\",\"link\":\"#安全区域\",\"children\":[]},{\"level\":2,\"title\":\"强引用（Strong Reference） - 不回收\",\"slug\":\"强引用-strong-reference-不回收\",\"link\":\"#强引用-strong-reference-不回收\",\"children\":[]},{\"level\":2,\"title\":\"软引用（Soft Reference） - 内存不足即回收\",\"slug\":\"软引用-soft-reference-内存不足即回收\",\"link\":\"#软引用-soft-reference-内存不足即回收\",\"children\":[]},{\"level\":2,\"title\":\"弱引用（Weak Reference） - 发现即回收\",\"slug\":\"弱引用-weak-reference-发现即回收\",\"link\":\"#弱引用-weak-reference-发现即回收\",\"children\":[{\"level\":3,\"title\":\"软引用和弱引用的区别\",\"slug\":\"软引用和弱引用的区别\",\"link\":\"#软引用和弱引用的区别\",\"children\":[]}]},{\"level\":2,\"title\":\"虚引用（Phantom Reference） - 对象回收跟踪\",\"slug\":\"虚引用-phantom-reference-对象回收跟踪\",\"link\":\"#虚引用-phantom-reference-对象回收跟踪\",\"children\":[]},{\"level\":2,\"title\":\"终结器引用\",\"slug\":\"终结器引用\",\"link\":\"#终结器引用\",\"children\":[]}],\"readingTime\":{\"minutes\":26.4,\"words\":7919},\"filePathRelative\":\"Java/jvm/part1/16.垃圾回收相关概念.md\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
