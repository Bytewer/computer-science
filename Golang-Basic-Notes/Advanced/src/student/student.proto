syntax = "proto3";
option go_package = ".;main";

import "google/protobuf/any.proto";

/**
推荐风格
1. 文件(Files)
  文件名使用小写下划线的命名风格，例如 lower_snake_case.proto
  每行不超过 80 字符
  使用 2 个空格缩进

2. 包(Packages)
  包名应该和目录结构对应，例如文件在my/package/目录下，包名应为 my.package

3. 消息和字段(Messages & Fields)
  消息名使用首字母大写驼峰风格(CamelCase)，例如message StudentRequest { ... }
  字段名使用小写下划线的风格，例如 string status_code = 1
  枚举类型，枚举名使用首字母大写驼峰风格，例如 enum FooBar，枚举值使用全大写下划线隔开的风格(CAPITALS_WITH_UNDERSCORES )，例如 FOO_DEFAULT=1

4. 服务(Services)
  RPC 服务名和方法名，均使用首字母大写驼峰风格，例如service FooService{ rpc GetSomething() }
 */

/**
* protobuf 有2个版本，默认版本是 proto2，如果需要 proto3，则需要在非空非注释第一行使用 syntax = "proto3" 标明版本。
* package，即包名声明符是可选的，用来防止不同的消息类型有命名冲突。
* 消息类型 使用 message 关键字定义，Student 是类型名，name, male, scores 是该类型的 3 个字段，类型分别为 string, bool 和 []int32。字段可以是标量类型，也可以是合成类型。
* 每个字段的修饰符默认是 singular，一般省略不写，repeated 表示字段可重复，即用来表示 Go 语言中的数组类型。
* 每个字符 =后面的数字称为标识符，每个字段都需要提供一个唯一的标识符。标识符用来在消息的二进制格式中识别各个字段，一旦使用就不能够再改变，标识符的取值范围为 [1, 2^29 - 1] 。
* .proto 文件可以写注释
* 一个 .proto 文件中可以写多个消息类型，即对应多个结构体(struct)。
*/

message Student {
  string name = 1;
  enum Gender {
    FEMALE = 0;
    MALE = 1;
  }
  Gender gender = 2;
  repeated int32 scores = 3;
}

// repeated 表示字段可重复，即用来表示 Go 语言中的数组类型。
message SearchResponse {
  repeated Result result = 1;
}

message Result {
  string url = 1;
  string title = 2;
  repeated string snippets = 3;
}

// Any 可以表示不在 .proto 中定义任意的内置类型。
message ErrorState {
  string message = 1;
  repeated google.protobuf.Any detail = 2;
}

//message SampleMessage {
//  oneof test_oneof {
//    string name = 4;
//    SubMessage sub_message = 9;
//  }
//}

message MapRequest {
  map<string, int32> points = 1;
}

// 如果消息类型是用来远程通信的(Remote Procedure Call, RPC)，可以在 .proto 文件中定义 RPC 服务接口。
// 例如我们定义了一个名为 SearchService 的 RPC 服务，提供了 Search 接口
//service SearchService {
//  rpc Search (SearchRequest) returns (SearchResponse)
//}

